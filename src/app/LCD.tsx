/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
	nodes: {
		Cube: THREE.Mesh;
		Cube_1: THREE.Mesh;
		Cube_2: THREE.Mesh;
		Cube_3: THREE.Mesh;
		Text: THREE.Mesh;
	};
	materials: {
		["PCB Backing"]: THREE.MeshPhysicalMaterial;
		["Display holder"]: THREE.MeshPhysicalMaterial;
		["Silver metal"]: THREE.MeshPhysicalMaterial;
		Screen: THREE.MeshPhysicalMaterial;
		Material: THREE.MeshStandardMaterial;
	};
};

const LCD = function LCD(props: React.ComponentProps<'group'>) {

	const { nodes, materials } = useGLTF("/3d/LCDBW.glb") as unknown as GLTFResult;
	const myMesh = useRef<THREE.Group>(null!);
	const lcdContainer = document.getElementById('lcd-container');
	let clockStart = 0;
	let duration = 2;
	let timeDelay = 0.2;

	useFrame(({ clock }) => {
		if (lcdContainer?.classList.contains('show')) {
			let elapsed = clock.getElapsedTime() - clockStart - timeDelay;
			if (elapsed > 0) {
				let increment = Math.sqrt(1 - (((elapsed / duration) - 1) ** 2));
				if (elapsed > duration) {
					myMesh.current.rotation.y = - Math.PI / 2;
					myMesh.current.position.x = 0;
				} else {
					myMesh.current.rotation.y = - (Math.PI / 2) * ((increment / 2) + .5);
					myMesh.current.position.x = 10 * (increment - 1);
				}
			}
		} else {
			clockStart = clock.getElapsedTime();
		}
	});

	return (
		<group {...props} dispose={null} ref={myMesh}>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.Text.geometry}
				material={materials.Material}
				position={[5.362, 0.781, 30.1]}
				rotation={[Math.PI / 2, 0, -Math.PI / 2]}
			/>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.Cube.geometry}
				material={materials["PCB Backing"]}
			/>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.Cube_1.geometry}
				material={materials["Display holder"]}
			/>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.Cube_2.geometry}
				material={materials["Silver metal"]}
			/>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.Cube_3.geometry}
				material={materials.Screen}
			/>
		</group>
	);
}

export default LCD;

useGLTF.preload("/3d/LCDBW.glb");