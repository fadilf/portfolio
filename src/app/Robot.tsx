/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
	nodes: {
		Base: THREE.Mesh;
		Section_1: THREE.Mesh;
		Cylinder: THREE.Mesh;
		Hat: THREE.Mesh;
		Icosphere: THREE.Mesh;
		Icosphere001: THREE.Mesh;
		Section_2: THREE.Mesh;
		Section_3: THREE.Mesh;
		Section_4: THREE.Mesh;
		Cylinder014: THREE.Mesh;
		Cylinder014_1: THREE.Mesh;
		Cylinder014_2: THREE.Mesh;
		Cylinder014_3: THREE.Mesh;
		Cylinder014_4: THREE.Mesh;
		Cube005: THREE.Mesh;
		Cube005_1: THREE.Mesh;
		Cube005_2: THREE.Mesh;
	};
	materials: {
		["Base grey"]: THREE.MeshStandardMaterial;
		["Robot grey"]: THREE.MeshPhysicalMaterial;
		Mustache: THREE.MeshStandardMaterial;
		["Hat black"]: THREE.MeshPhysicalMaterial;
		Metal: THREE.MeshStandardMaterial;
		Rubber: THREE.MeshPhysicalMaterial;
		["Pencil orange"]: THREE.MeshStandardMaterial;
		["Pencil wood"]: THREE.MeshStandardMaterial;
		["Pencil lead"]: THREE.MeshStandardMaterial;
		Paper: THREE.MeshStandardMaterial;
		["Robo Lisa"]: THREE.MeshStandardMaterial;
	};
};

export default function Robot(props: React.ComponentProps<'group'>) {
	const { nodes, materials } = useGLTF("/3d/AI.glb") as unknown as GLTFResult;
	const easel = useRef<THREE.Group>(null!);
	const robotArm = useRef<THREE.Mesh>(null!);
	const section2 = useRef<THREE.Mesh>(null!);
	const section3 = useRef<THREE.Mesh>(null!);
	const robotContainer = document.getElementById('robot-container');
	let clockStart = 0;
	let duration = 2;
	let rotationOffset = 0.5;
	let timeDelay = 0.2;

	useFrame(({ clock }) => {
		if (robotContainer?.classList.contains('show')) {
			let elapsed = clock.getElapsedTime() - clockStart - timeDelay;
			if (elapsed > 0) {
				let increment = Math.sqrt(1 - (((elapsed / duration) - 1) ** 2));
				if (elapsed > duration) {
					easel.current.rotation.y = - Math.PI / 2 + rotationOffset;
					robotArm.current.rotation.y = Math.PI / 2 - rotationOffset;
					easel.current.position.z = 4;
					section2.current.rotation.x = - 0.15;
					section3.current.rotation.x = 1.12;
				} else {
					easel.current.rotation.y = - (Math.PI / 2) * ((increment / 2) + .5) + rotationOffset;
					robotArm.current.rotation.y = (Math.PI / 2) * ((increment / 2) + .5) - rotationOffset;
					easel.current.position.z = increment * 4;
					section2.current.rotation.x = 0.35 - (increment / 2);
					section3.current.rotation.x = 0.62 + (increment / 2);
				}
			}
		} else {
			clockStart = clock.getElapsedTime();
		}
	});
	return (
		<group {...props} dispose={null}>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.Base.geometry}
				material={materials["Base grey"]}
				position={[0, 0.25, -3.945]}
				ref={robotArm}
			>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Section_1.geometry}
					material={materials["Robot grey"]}
					position={[0, 0.25, 0]}
					rotation={[0, -1.571, 0]}
				>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder.geometry}
						material={materials.Mustache}
						position={[1.294, 1.245, -1.42]}
						rotation={[0, 1.571, 0]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Hat.geometry}
						material={materials["Hat black"]}
						position={[0.035, 2.011, -2.038]}
						rotation={[0, 1.571, 0]}
					>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Icosphere.geometry}
							material={materials["Hat black"]}
							position={[0.17, 0.054, 0.048]}
							rotation={[-0.385, -0.474, -0.883]}
						>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Icosphere001.geometry}
								material={materials["Hat black"]}
								position={[-0.046, 0.413, 0.538]}
								rotation={[0.186, 0.503, 0.484]}
							/>
						</mesh>
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Section_2.geometry}
						material={materials["Robot grey"]}
						position={[0.48, 1.43, -1.6]}
						rotation={[-0.424, 0.017, 0.004]}
						ref={section2}
					>
						<mesh
							castShadow
							receiveShadow
							geometry={nodes.Section_3.geometry}
							material={materials["Robot grey"]}
							position={[0.486, 1.37, 3.23]}
							rotation={[1.12, -0.027, -1.549]}
							ref={section3}
						>
							<mesh
								castShadow
								receiveShadow
								geometry={nodes.Section_4.geometry}
								material={materials.Metal}
								position={[-0.169, -0.52, -1.875]}
								rotation={[Math.PI / 2, Math.PI / 2, 0]}
								scale={[1, 1.474, 1]}
							>
								<group
									position={[0.949, -0.513, -0.006]}
									rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
									scale={[1, 1, 0.678]}
								>
									<mesh
										castShadow
										receiveShadow
										geometry={nodes.Cylinder014.geometry}
										material={materials.Rubber}
									/>
									<mesh
										castShadow
										receiveShadow
										geometry={nodes.Cylinder014_1.geometry}
										material={materials.Metal}
									/>
									<mesh
										castShadow
										receiveShadow
										geometry={nodes.Cylinder014_2.geometry}
										material={materials["Pencil orange"]}
									/>
									<mesh
										castShadow
										receiveShadow
										geometry={nodes.Cylinder014_3.geometry}
										material={materials["Pencil wood"]}
									/>
									<mesh
										castShadow
										receiveShadow
										geometry={nodes.Cylinder014_4.geometry}
										material={materials["Pencil lead"]}
									/>
								</group>
							</mesh>
						</mesh>
					</mesh>
				</mesh>
			</mesh>
			<group position={[0, 2.214, 1.163]} ref={easel}>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Cube005.geometry}
					material={materials["Pencil wood"]}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Cube005_1.geometry}
					material={materials.Paper}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Cube005_2.geometry}
					material={materials["Robo Lisa"]}
				/>
			</group>
		</group>
	);
}

useGLTF.preload("/3d/AI.glb");